apiVersion: v1
kind: ConfigMap
metadata:
  name: trace-ingestor-config
  namespace: monitoring
data:
  ingestion.yaml: |
    ingestions:
      -
        name: IngestionTrigger_Dsib
        mappings:
          - from: log.trace.task.input[filename_string]
            to: dsib.filename
          - from: log.trace.header.mission
            to: dsib.mission
          - from: log.trace.task.input[pickup_point_detection_date]
            to: dsib.seen_date
          - from: log.trace.task.input[pickup_point_available_date]
            to: dsib.available_date
      -
        name: IngestionTrigger_Chunk
        mappings:
          - from: log.trace.task.input[filename_string]
            to: chunk.filename
          - from: log.trace.header.mission
            to: chunk.mission
          - from: log.trace.task.input[pickup_point_detection_date]
            to: chunk.seen_date
          - from: log.trace.task.input[pickup_point_available_date]
            to: chunk.available_date
      -
        name: IngestionTrigger_AuxData
        mappings:
          - from: log.trace.task.input[filename_string]
            to: aux_data.filename
          - from: log.trace.header.mission
            to: aux_data.mission
          - from: log.trace.task.input[pickup_point_detection_date]
            to: aux_data.seen_date
          - from: log.trace.task.input[pickup_point_available_date]
            to: aux_data.available_date
      -
        name: IngestionWorker_Dsib
        mappings:
          - from: log.trace.task.output[filename_string]
            to: dsib.filename
          - from: log.trace.header.mission
            to: dsib.mission
          - from: log.trace.header.timestamp
            to: dsib.ingestion_date
      -
        name: IngestionWorker_Chunk
        mappings:
          - from: log.trace.task.output[filename_string]
            to: chunk.filename
          - from: log.trace.header.mission
            to: chunk.mission
          - from: log.trace.header.timestamp
            to: chunk.ingestion_date
      -
        name: IngestionWorker_AuxData
        mappings:
          - from: log.trace.task.output[filename_string]
            to: aux_data.filename
          - from: log.trace.header.mission
            to: aux_data.mission
          - from: log.trace.header.timestamp
            to: aux_data.ingestion_date
      -
        name: MetadataExtraction_Dsib
        mappings:
          - from: log.trace.task.input[filename_string]
            to: dsib.filename
          - from: log.trace.header.mission
            to: dsib.mission
          - from: log.trace.header.timestamp
            to: dsib.catalog_storage_end_date
          - from: 
              - al1 -> log.trace.header.timestamp
              - al2 -> log.trace.task.duration_in_seconds
            action: SUBSTRACT al1 al2
            to: dsib.catalog_storage_begin_date
          - from: log.trace.task.output[product_metadata_custom_object]
            to: dsib.custom
      -
        name: MetadataExtraction_Chunk
        mappings:
          - from: log.trace.task.input[filename_string]
            to: chunk.filename
          - from: log.trace.header.mission
            to: chunk.mission
          - from: log.trace.header.timestamp
            to: chunk.catalog_storage_end_date
          - from: 
              - al1 -> log.trace.header.timestamp
              - al2 -> log.trace.task.duration_in_seconds
            action: SUBSTRACT al1 al2
            to: chunk.catalog_storage_begin_date
          - from: log.trace.task.output[product_metadata_custom_object]
            to: chunk.custom
      -
        name: MetadataExtraction_AuxData
        mappings:
          - from: log.trace.task.input[filename_string]
            to: aux_data.filename
          - from: log.trace.header.mission
            to: aux_data.mission
          - from: log.trace.header.timestamp
            to: aux_data.catalog_storage_end_date
          - from: 
              - al1 -> log.trace.header.timestamp
              - al2 -> log.trace.task.duration_in_seconds
            action: SUBSTRACT al1 al2
            to: aux_data.catalog_storage_begin_date
          - from: log.trace.task.output[product_metadata_custom_object]
            to: aux_data.custom
      -
        name: MetadataExtraction_Product
        mappings:
          - from: log.trace.task.input[filename_string]
            action: FORMAT ^.+(?=.zip)|.+$ %1$s
            to: product.filename
          - from: log.trace.task.output[timeliness_name_string]
            to: product.timeliness_name
          - from: log.trace.task.output[timeliness_value_seconds_integer]
            to: product.timeliness_value_seconds
          - from: log.trace.task.output[end_to_end_product_boolean]
            to: product.end_to_end_product
          - from: log.trace.task.output[product_metadata_custom_object]
            to: product.custom
          - from: log.trace.header.timestamp
            to: product.catalog_storage_end_date
          - from: 
              - al1 -> log.trace.header.timestamp
              - al2 -> log.trace.task.duration_in_seconds
            action: SUBSTRACT al1 al2
            to: product.catalog_storage_begin_date
      -
        name: JobProcessing_Product-multiOutput
        mappings:
          - from: log.trace.task.input[filename_strings]
            action: MATCH DCS_.+?_DSIB\.xml$
            to: dsib.filename
          - from: log.trace.header.mission
            to: dsib.mission
          - from: log.trace.task.input[filename_strings]
            action: MATCH DCS_.+?\.raw$
            to: chunk.filename
          - from: log.trace.header.mission
            to: chunk.mission
          - from: log.trace.task.input[filename_strings]
            action: MATCH ^(S1.*(AUX_|AMH_|AMV_|MPL_ORB).*)|(S1.*(_OPER_REP_MP_MP__PDMC_|_OPER_REP__SUP___|_OPER_MPL_SP.{4}_PDMC_|_OPER_REP_STNACQ_.{4}_|_OPER_REP_STNUNV_.{4}_|_OPER_AM[VH_]_FAILUR_MPC__|_OPER_REP__MACP__).*\.(zip|ZIP))|((S2)(A|B|_)_(OPER|TEST)_((AUX|GIP)_[0-9A-Z_]{7})(.*)\.TGZ)|(S3[AB_]_([0-9a-zA-Z_]{9})AX_([0-9]{8}T[0-9]{6})_([0-9]{8}T[0-9]{6})_([0-9]{8}T[0-9]{6})_(_{17})_([0-9a-zA-Z_]{3})_(((O|F|R|D|_)_(NR|NT|ST|SN|NS|NN|AL|__)_([a-zA-Z0-9_]{3}))|_{8})\.SEN3\.(zip|ZIP))$
            to: aux_data.filename
          - from: log.trace.header.mission
            to: aux_data.mission
          - from: log.trace.task.output[filename_strings]
            action: FORMAT ^.+(?=.zip)|.+$ %1$s
            to: output_product.filename
          - from: log.trace.task.output[t0_pdgs_date]
            to: output_product.t0_pdgs_date
          - from: log.trace.header.timestamp
            to: output_product.generation_end_date
          - from: 
              - al1 -> log.trace.header.timestamp
              - al2 -> log.trace.task.duration_in_seconds
            action: SUBSTRACT al1 al2
            to: output_product.generation_begin_date
          - from: log.trace.task.input[filename_strings]
            action: FORMAT ^S[0-9][A-Z].+(?=.zip)$|^S[0-9][A-Z].+$ %1$s
            to: input_product.filename
          - from: log.trace.task.status
            to: processing.status
          - from: log.trace.header.mission
            to: processing.mission
          - from: log.trace.header.level
            to: processing.level
          - from: log.trace.header.workflow
            to: processing.workflow
          - from: log.trace.task.output[t0_pdgs_date]
            to: processing.t0_pdgs_date
          - from: log.trace.header.rs_chain_name
            to: processing.rs_chain_name
          - from: log.trace.header.rs_chain_version
            to: processing.rs_chain_version
          - from: log.trace.header.timestamp
            to: processing.processing_date
          - from: log.trace.task.missing_output[product_metadata_custom_object]
            remove_entity_if_null: true
            to: missing_products.product_metadata_custom
          - from: log.trace.task.missing_output[end_to_end_product_boolean]
            to: missing_products.end_to_end_product
          - from: log.trace.task.missing_output[estimated_count_integer]
            to: missing_products.estimated_count
        alias:
          input_product:
            entity: product
            restrict: input_list_internal
          output_product:
            entity: product
            restrict: output_list
        duplicate_processings:
          - query: processing.id in (select ile.processing_id from input_list_external ile where ile.external_input_id in <chunk.id,dsib.id>) and processing.rs_chain_name = <processing.rs_chain_name> and processing.rs_chain_version = <processing.rs_chain_version>
            rules:
              log.trace.header.rs_chain_name: S1-L0AIOP|s2-l0u|S3-ACQ
          - query: processing.id in (select ol.processing_id from output_list ol where ol.product_id in <output_product.id>) and processing.rs_chain_name = <processing.rs_chain_name> and processing.rs_chain_version = <processing.rs_chain_version>
            rules:
              log.trace.header.rs_chain_name: S1-L0ASP|S1-L1|S1-L2|s2-l0c|s2-l1
          - query: processing.id in (select ili.processing_id from input_list_internal ili where ili.product_id in <input_product.id>) and processing.rs_chain_name = <processing.rs_chain_name> and processing.rs_chain_version = <processing.rs_chain_version>
      -
        name: JobProcessing_Product-singleOutput
        mappings:
          - from: log.trace.task.input[filename_strings]
            action: MATCH DCS_.+?_DSIB\.xml$
            to: dsib.filename
          - from: log.trace.header.mission
            to: dsib.mission
          - from: log.trace.task.input[filename_strings]
            action: MATCH DCS_.+?\.raw$
            to: chunk.filename
          - from: log.trace.header.mission
            to: chunk.mission
          - from: log.trace.task.input[filename_strings]
            action: MATCH ^(S1.*(AUX_|AMH_|AMV_|MPL_ORB).*)|(S1.*(_OPER_REP_MP_MP__PDMC_|_OPER_REP__SUP___|_OPER_MPL_SP.{4}_PDMC_|_OPER_REP_STNACQ_.{4}_|_OPER_REP_STNUNV_.{4}_|_OPER_AM[VH_]_FAILUR_MPC__|_OPER_REP__MACP__).*\.(zip|ZIP))|((S2)(A|B|_)_(OPER|TEST)_((AUX|GIP)_[0-9A-Z_]{7})(.*)\.TGZ)|(S3[AB_]_([0-9a-zA-Z_]{9})AX_([0-9]{8}T[0-9]{6})_([0-9]{8}T[0-9]{6})_([0-9]{8}T[0-9]{6})_(_{17})_([0-9a-zA-Z_]{3})_(((O|F|R|D|_)_(NR|NT|ST|SN|NS|NN|AL|__)_([a-zA-Z0-9_]{3}))|_{8})\.SEN3\.(zip|ZIP))$
            to: aux_data.filename
          - from: log.trace.header.mission
            to: aux_data.mission
          - from: log.trace.task.output[filename_string]
            action: FORMAT ^.+(?=.zip)|.+$ %1$s
            to: output_product.filename
          - from: log.trace.task.output[t0_pdgs_date]
            to: output_product.t0_pdgs_date
          - from: log.trace.header.timestamp
            to: output_product.generation_end_date
          - from: 
              - al1 -> log.trace.header.timestamp
              - al2 -> log.trace.task.duration_in_seconds
            action: SUBSTRACT al1 al2
            to: output_product.generation_begin_date
          - from: log.trace.task.input[filename_strings]
            action: FORMAT ^S[0-9][A-Z].+(?=.zip)$|^S[0-9][A-Z].+$ %1$s
            to: input_product.filename
          - from: log.trace.task.status
            to: processing.status
          - from: log.trace.header.mission
            to: processing.mission
          - from: log.trace.header.level
            to: processing.level
          - from: log.trace.header.workflow
            to: processing.workflow
          - from: log.trace.task.output[t0_pdgs_date]
            to: processing.t0_pdgs_date
          - from: log.trace.header.rs_chain_name
            to: processing.rs_chain_name
          - from: log.trace.header.rs_chain_version
            to: processing.rs_chain_version
          - from: log.trace.header.timestamp
            to: processing.processing_date
          - from: log.trace.task.missing_output[product_metadata_custom_object]
            remove_entity_if_null: true
            to: missing_products.product_metadata_custom
          - from: log.trace.task.missing_output[end_to_end_product_boolean]
            to: missing_products.end_to_end_product
          - from: log.trace.task.missing_output[estimated_count_integer]
            to: missing_products.estimated_count
        alias:
          input_product:
            entity: product
            restrict: input_list_internal
          output_product:
            entity: product
            restrict: output_list
        duplicate_processings:
          - query: processing.id in (select ol.processing_id from output_list ol where ol.product_id in <output_product.id>) and processing.rs_chain_name = <processing.rs_chain_name> and processing.rs_chain_version = <processing.rs_chain_version>
      -
        name: JobProcessing_Product-onlyMissingOutput
        mappings:
          - from: log.trace.task.input[filename_strings]
            action: MATCH DCS_.+?_DSIB\.xml$
            to: dsib.filename
          - from: log.trace.header.mission
            to: dsib.mission
          - from: log.trace.task.input[filename_strings]
            action: MATCH DCS_.+?\.raw$
            to: chunk.filename
          - from: log.trace.header.mission
            to: chunk.mission
          - from: log.trace.task.input[filename_strings]
            action: MATCH ^(S1.*(AUX_|AMH_|AMV_|MPL_ORB).*)|(S1.*(_OPER_REP_MP_MP__PDMC_|_OPER_REP__SUP___|_OPER_MPL_SP.{4}_PDMC_|_OPER_REP_STNACQ_.{4}_|_OPER_REP_STNUNV_.{4}_|_OPER_AM[VH_]_FAILUR_MPC__|_OPER_REP__MACP__).*\.(zip|ZIP))|((S2)(A|B|_)_(OPER|TEST)_((AUX|GIP)_[0-9A-Z_]{7})(.*)\.TGZ)|(S3[AB_]_([0-9a-zA-Z_]{9})AX_([0-9]{8}T[0-9]{6})_([0-9]{8}T[0-9]{6})_([0-9]{8}T[0-9]{6})_(_{17})_([0-9a-zA-Z_]{3})_(((O|F|R|D|_)_(NR|NT|ST|SN|NS|NN|AL|__)_([a-zA-Z0-9_]{3}))|_{8})\.SEN3\.(zip|ZIP))$
            to: aux_data.filename
          - from: log.trace.header.mission
            to: aux_data.mission
          - from: log.trace.task.input[filename_strings]
            action: FORMAT ^S[0-9][A-Z].+(?=.zip)$|^S[0-9][A-Z].+$ %1$s
            to: input_product.filename
          - from: log.trace.task.status
            to: processing.status
          - from: log.trace.header.mission
            to: processing.mission
          - from: log.trace.header.level
            to: processing.level
          - from: log.trace.header.workflow
            to: processing.workflow
          - from: log.trace.task.output[t0_pdgs_date]
            to: processing.t0_pdgs_date
          - from: log.trace.header.rs_chain_name
            to: processing.rs_chain_name
          - from: log.trace.header.rs_chain_version
            to: processing.rs_chain_version
          - from: log.trace.header.timestamp
            to: processing.processing_date
          - from: log.trace.task.missing_output[product_metadata_custom_object]
            remove_entity_if_null: true
            to: missing_products.product_metadata_custom
          - from: log.trace.task.missing_output[end_to_end_product_boolean]
            to: missing_products.end_to_end_product
          - from: log.trace.task.missing_output[estimated_count_integer]
            to: missing_products.estimated_count
        alias:
          input_product:
            entity: product
            restrict: input_list_internal
      -
        name: PripWorker_Product
        mappings:
          - from: log.trace.task.input[filename_string]
            action: FORMAT ^.+(?=.zip)|.+$ %1$s
            to: product.filename
          - from: log.trace.header.timestamp
            to: product.prip_storage_end_date
          - from: 
              - al1 -> log.trace.header.timestamp
              - al2 -> log.trace.task.duration_in_seconds
            action: SUBSTRACT al1 al2
            to: product.prip_storage_begin_date
      -
        name: OQC_Product
        mappings:
          - from: log.trace.task.input[filename_string]
            action: FORMAT ^.+(?=.zip)|.+$ %1$s
            to: product.filename
          - from: log.trace.header.timestamp
            to: product.quality_check_end_date
          - from: 
              - al1 -> log.trace.header.timestamp
              - al2 -> log.trace.task.duration_in_seconds
            action: SUBSTRACT al1 al2
            to: product.quality_check_begin_date
      -
        name: PripTempDownloadUrl_Product
        mappings:
          - from: log.trace.task.input[filename_string]
            action: FORMAT ^.+(?=.zip)|.+$ %1$s
            to: product.filename
          - from: log.trace.header.timestamp
            set_value_only_if_null: true
            to: product.first_download_date
      -
        name: EvictionManagementWorker_Product
        mappings:
          - from: log.trace.task.input[filename_string]
            action: FORMAT ^.+(?=.zip)|.+$ %1$s
            to: product.filename
          - from: log.trace.task.ouput[eviction_date]
            to: product.eviction_date